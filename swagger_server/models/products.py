# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.product_categories import ProductCategories  # noqa: F401,E501
from swagger_server.models.product_locations import ProductLocations  # noqa: F401,E501
from swagger_server.models.product_profiles import ProductProfiles  # noqa: F401,E501
from swagger_server import util


class Products(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, p_uid: str=None, location: ProductLocations=None, category: ProductCategories=None, profile: ProductProfiles=None):  # noqa: E501
        """Products - a model defined in Swagger

        :param p_uid: The p_uid of this Products.  # noqa: E501
        :type p_uid: str
        :param location: The location of this Products.  # noqa: E501
        :type location: ProductLocations
        :param category: The category of this Products.  # noqa: E501
        :type category: ProductCategories
        :param profile: The profile of this Products.  # noqa: E501
        :type profile: ProductProfiles
        """
        self.swagger_types = {
            'p_uid': str,
            'location': ProductLocations,
            'category': ProductCategories,
            'profile': ProductProfiles
        }

        self.attribute_map = {
            'p_uid': 'p_uid',
            'location': 'location',
            'category': 'category',
            'profile': 'profile'
        }
        self._p_uid = p_uid
        self._location = location
        self._category = category
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt) -> 'Products':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Products of this Products.  # noqa: E501
        :rtype: Products
        """
        return util.deserialize_model(dikt, cls)

    @property
    def p_uid(self) -> str:
        """Gets the p_uid of this Products.


        :return: The p_uid of this Products.
        :rtype: str
        """
        return self._p_uid

    @p_uid.setter
    def p_uid(self, p_uid: str):
        """Sets the p_uid of this Products.


        :param p_uid: The p_uid of this Products.
        :type p_uid: str
        """

        self._p_uid = p_uid

    @property
    def location(self) -> ProductLocations:
        """Gets the location of this Products.


        :return: The location of this Products.
        :rtype: ProductLocations
        """
        return self._location

    @location.setter
    def location(self, location: ProductLocations):
        """Sets the location of this Products.


        :param location: The location of this Products.
        :type location: ProductLocations
        """

        self._location = location

    @property
    def category(self) -> ProductCategories:
        """Gets the category of this Products.


        :return: The category of this Products.
        :rtype: ProductCategories
        """
        return self._category

    @category.setter
    def category(self, category: ProductCategories):
        """Sets the category of this Products.


        :param category: The category of this Products.
        :type category: ProductCategories
        """

        self._category = category

    @property
    def profile(self) -> ProductProfiles:
        """Gets the profile of this Products.


        :return: The profile of this Products.
        :rtype: ProductProfiles
        """
        return self._profile

    @profile.setter
    def profile(self, profile: ProductProfiles):
        """Sets the profile of this Products.


        :param profile: The profile of this Products.
        :type profile: ProductProfiles
        """

        self._profile = profile

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductBusinesses(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, contractor_id: str=None, website_link: str=None, followers: int=None, address: str=None):  # noqa: E501
        """ProductBusinesses - a model defined in Swagger

        :param id: The id of this ProductBusinesses.  # noqa: E501
        :type id: str
        :param contractor_id: The contractor_id of this ProductBusinesses.  # noqa: E501
        :type contractor_id: str
        :param website_link: The website_link of this ProductBusinesses.  # noqa: E501
        :type website_link: str
        :param followers: The followers of this ProductBusinesses.  # noqa: E501
        :type followers: int
        :param address: The address of this ProductBusinesses.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            'id': str,
            'contractor_id': str,
            'website_link': str,
            'followers': int,
            'address': str
        }

        self.attribute_map = {
            'id': 'id',
            'contractor_id': 'contractor_id',
            'website_link': 'website_link',
            'followers': 'followers',
            'address': 'address'
        }
        self._id = id
        self._contractor_id = contractor_id
        self._website_link = website_link
        self._followers = followers
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'ProductBusinesses':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product_businesses of this ProductBusinesses.  # noqa: E501
        :rtype: ProductBusinesses
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ProductBusinesses.


        :return: The id of this ProductBusinesses.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ProductBusinesses.


        :param id: The id of this ProductBusinesses.
        :type id: str
        """

        self._id = id

    @property
    def contractor_id(self) -> str:
        """Gets the contractor_id of this ProductBusinesses.


        :return: The contractor_id of this ProductBusinesses.
        :rtype: str
        """
        return self._contractor_id

    @contractor_id.setter
    def contractor_id(self, contractor_id: str):
        """Sets the contractor_id of this ProductBusinesses.


        :param contractor_id: The contractor_id of this ProductBusinesses.
        :type contractor_id: str
        """

        self._contractor_id = contractor_id

    @property
    def website_link(self) -> str:
        """Gets the website_link of this ProductBusinesses.


        :return: The website_link of this ProductBusinesses.
        :rtype: str
        """
        return self._website_link

    @website_link.setter
    def website_link(self, website_link: str):
        """Sets the website_link of this ProductBusinesses.


        :param website_link: The website_link of this ProductBusinesses.
        :type website_link: str
        """

        self._website_link = website_link

    @property
    def followers(self) -> int:
        """Gets the followers of this ProductBusinesses.


        :return: The followers of this ProductBusinesses.
        :rtype: int
        """
        return self._followers

    @followers.setter
    def followers(self, followers: int):
        """Sets the followers of this ProductBusinesses.


        :param followers: The followers of this ProductBusinesses.
        :type followers: int
        """

        self._followers = followers

    @property
    def address(self) -> str:
        """Gets the address of this ProductBusinesses.


        :return: The address of this ProductBusinesses.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this ProductBusinesses.


        :param address: The address of this ProductBusinesses.
        :type address: str
        """

        self._address = address
